{
 "Resources": {
  "MyLambdaRole6064C0FA": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    }
   },
   "Metadata": {
    "aws:cdk:path": "MflOddsPosterStack/MyLambdaRole/Resource"
   }
  },
  "MyLambdaRoleDefaultPolicyF04EC3D5": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "logs:CreateLogGroup",
        "logs:CreateLogStream",
        "logs:PutLogEvents"
       ],
       "Effect": "Allow",
       "Resource": {
        "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*"
       }
      },
      {
       "Action": "secretsmanager:GetSecretValue",
       "Effect": "Allow",
       "Resource": {
        "Fn::Sub": "arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:MflOddsPosterStack-CloudFrontApiGatewayToLambdaLam*"
       }
      },
      {
       "Action": "lambda:InvokeFunction",
       "Effect": "Allow",
       "Resource": {
        "Fn::Sub": "arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:MflOddsPosterStack-ApiGatewayToLambdaPatternLambda-*"
       }
      },
      {
       "Action": [
        "xray:PutTelemetryRecords",
        "xray:PutTraceSegments"
       ],
       "Effect": "Allow",
       "Resource": "*"
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "MyLambdaRoleDefaultPolicyF04EC3D5",
    "Roles": [
     {
      "Ref": "MyLambdaRole6064C0FA"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "MflOddsPosterStack/MyLambdaRole/DefaultPolicy/Resource",
    "cfn_nag": {
     "rules_to_suppress": [
      {
       "id": "W12",
       "reason": "Lambda needs the following minimum required permissions to send trace data to X-Ray and access ENIs in a VPC."
      },
      {
       "id": "W12",
       "reason": "Lambda needs the following minimum required permissions to send trace data to X-Ray and access ENIs in a VPC."
      }
     ]
    }
   }
  },
  "mflOddsKmsKey": {
   "Type": "AWS::KMS::Key",
   "Properties": {
    "BypassPolicyLockoutSafetyCheck": false,
    "EnableKeyRotation": true,
    "Enabled": true,
    "KeyPolicy": {
     "Version": "2012-10-17",
     "Id": "key-default-1",
     "Statement": [
      {
       "Sid": "Enable IAM User Permissions",
       "Effect": "Allow",
       "Principal": {
        "AWS": {
         "Fn::Sub": "arn:${AWS::Partition}:iam::${AWS::AccountId}:root"
        }
       },
       "Action": "kms:*",
       "Resource": "*"
      },
      {
       "Sid": "Allow use of the key",
       "Effect": "Allow",
       "Principal": {
        "AWS": {
         "Fn::GetAtt": [
          "MyLambdaRole6064C0FA",
          "Arn"
         ]
        }
       },
       "Action": [
        "kms:DescribeKey",
        "kms:Encrypt",
        "kms:Decrypt",
        "kms:ReEncrypt*",
        "kms:GenerateDataKey",
        "kms:GenerateDataKeyWithoutPlaintext"
       ],
       "Resource": "*"
      }
     ]
    },
    "MultiRegion": false,
    "RotationPeriodInDays": 360
   },
   "Metadata": {
    "aws:cdk:path": "MflOddsPosterStack/mflOddsKmsKey"
   }
  },
  "mflOddsApiKey": {
   "Type": "AWS::SecretsManager::Secret",
   "Properties": {
    "Description": "api key for the-odds-api",
    "KmsKeyId": {
     "Fn::GetAtt": [
      "mflOddsKmsKey",
      "KeyId"
     ]
    },
    "Name": "mflOdds-ApiKey"
   },
   "Metadata": {
    "aws:cdk:path": "MflOddsPosterStack/mflOdds-ApiKey"
   }
  },
  "mflOddsSecretResourcePolicy": {
   "Type": "AWS::SecretsManager::ResourcePolicy",
   "Properties": {
    "BlockPublicPolicy": true,
    "ResourcePolicy": {
     "Version": "2012-10-17",
     "Statement": [
      {
       "Effect": "Allow",
       "Principal": {
        "AWS": {
         "Fn::Sub": "arn:${AWS::Partition}:iam::${AWS::AccountId}:root"
        }
       },
       "Action": "secretsmanager:*",
       "Resource": "*"
      },
      {
       "Effect": "Allow",
       "Principal": {
        "AWS": {
         "Fn::GetAtt": [
          "MyLambdaRole6064C0FA",
          "Arn"
         ]
        }
       },
       "Action": [
        "secretsmanager:DescribeSecret",
        "secretsmanager:Get*",
        "secretsmanager:List*"
       ],
       "Resource": {
        "Fn::GetAtt": [
         "mflOddsApiKey",
         "Id"
        ]
       }
      }
     ]
    },
    "SecretId": {
     "Fn::GetAtt": [
      "mflOddsApiKey",
      "Id"
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "MflOddsPosterStack/mflOddsSecretResourcePolicy"
   }
  },
  "lambdapostoddspostdependenciesD74E5801": {
   "Type": "AWS::Lambda::LayerVersion",
   "Properties": {
    "Content": {
     "S3Bucket": {
      "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
     },
     "S3Key": "87c0f9b76e3902fbff8bba2a4f2af5049350180d5c9d4bee2bc0eb6a0d2eb830.zip"
    }
   },
   "Metadata": {
    "aws:cdk:path": "MflOddsPosterStack/lambda--post_odds-post-dependencies/Resource",
    "aws:asset:path": "asset.87c0f9b76e3902fbff8bba2a4f2af5049350180d5c9d4bee2bc0eb6a0d2eb830",
    "aws:asset:is-bundled": false,
    "aws:asset:property": "Content"
   }
  },
  "ApiGatewayToLambdaPatternLambdaFunctionServiceRole0C123D8D": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "Policies": [
     {
      "PolicyDocument": {
       "Statement": [
        {
         "Action": [
          "logs:CreateLogGroup",
          "logs:CreateLogStream",
          "logs:PutLogEvents"
         ],
         "Effect": "Allow",
         "Resource": {
          "Fn::Join": [
           "",
           [
            "arn:",
            {
             "Ref": "AWS::Partition"
            },
            ":logs:",
            {
             "Ref": "AWS::Region"
            },
            ":",
            {
             "Ref": "AWS::AccountId"
            },
            ":log-group:/aws/lambda/*"
           ]
          ]
         }
        }
       ],
       "Version": "2012-10-17"
      },
      "PolicyName": "LambdaFunctionServiceRolePolicy"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "MflOddsPosterStack/ApiGatewayToLambdaPattern/LambdaFunctionServiceRole/Resource",
    "guard": {
     "SuppressedRules": [
      "IAM_NO_INLINE_POLICY_CHECK"
     ]
    }
   }
  },
  "ApiGatewayToLambdaPatternLambdaFunction5DC51B7E": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "S3Bucket": {
      "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
     },
     "S3Key": "15c01f7579442b24a5f324c86404a7170b839f452894ff431e079aa9d68b1ae8.zip"
    },
    "Environment": {
     "Variables": {
      "SECRET_ARN": {
       "Fn::GetAtt": [
        "mflOddsApiKey",
        "Id"
       ]
      }
     }
    },
    "Handler": "post.lambda_handler",
    "Layers": [
     {
      "Ref": "lambdapostoddspostdependenciesD74E5801"
     }
    ],
    "Role": {
     "Fn::GetAtt": [
      "MyLambdaRole6064C0FA",
      "Arn"
     ]
    },
    "Runtime": "python3.11",
    "Timeout": 8,
    "TracingConfig": {
     "Mode": "Active"
    }
   },
   "DependsOn": [
    "MyLambdaRoleDefaultPolicyF04EC3D5",
    "MyLambdaRole6064C0FA"
   ],
   "Metadata": {
    "aws:cdk:path": "MflOddsPosterStack/ApiGatewayToLambdaPattern/LambdaFunction/Resource",
    "aws:asset:path": "asset.15c01f7579442b24a5f324c86404a7170b839f452894ff431e079aa9d68b1ae8",
    "aws:asset:is-bundled": false,
    "aws:asset:property": "Code",
    "cfn_nag": {
     "rules_to_suppress": [
      {
       "id": "W58",
       "reason": "Lambda functions has the required permission to write CloudWatch Logs. It uses custom policy instead of arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole with tighter permissions."
      },
      {
       "id": "W89",
       "reason": "This is not a rule for the general case, just for specific use cases/industries"
      },
      {
       "id": "W92",
       "reason": "Impossible for us to define the correct concurrency for clients"
      }
     ]
    }
   }
  },
  "ApiGatewayToLambdaPatternApiAccessLogGroup9383E9FC": {
   "Type": "AWS::Logs::LogGroup",
   "UpdateReplacePolicy": "Retain",
   "DeletionPolicy": "Retain",
   "Metadata": {
    "aws:cdk:path": "MflOddsPosterStack/ApiGatewayToLambdaPattern/ApiAccessLogGroup/Resource",
    "cfn_nag": {
     "rules_to_suppress": [
      {
       "id": "W86",
       "reason": "Retention period for CloudWatchLogs LogGroups are set to 'Never Expire' to preserve customer data indefinitely"
      },
      {
       "id": "W84",
       "reason": "By default CloudWatchLogs LogGroups data is encrypted using the CloudWatch server-side encryption keys (AWS Managed Keys)"
      }
     ]
    }
   }
  },
  "ApiGatewayToLambdaPatternLambdaRestApiC0598E46": {
   "Type": "AWS::ApiGateway::RestApi",
   "Properties": {
    "EndpointConfiguration": {
     "Types": [
      "EDGE"
     ]
    },
    "Name": "LambdaRestApi"
   },
   "Metadata": {
    "aws:cdk:path": "MflOddsPosterStack/ApiGatewayToLambdaPattern/LambdaRestApi/Resource"
   }
  },
  "ApiGatewayToLambdaPatternLambdaRestApiDeployment4109DB936142ac042f9560f21cea1d93aab946de": {
   "Type": "AWS::ApiGateway::Deployment",
   "Properties": {
    "Description": "Automatically created by the RestApi construct",
    "RestApiId": {
     "Ref": "ApiGatewayToLambdaPatternLambdaRestApiC0598E46"
    }
   },
   "DependsOn": [
    "ApiGatewayToLambdaPatternLambdaRestApiproxyANY321FD2C2",
    "ApiGatewayToLambdaPatternLambdaRestApiproxyF368A2D5",
    "ApiGatewayToLambdaPatternLambdaRestApiANY07ADEFED"
   ],
   "Metadata": {
    "aws:cdk:path": "MflOddsPosterStack/ApiGatewayToLambdaPattern/LambdaRestApi/Deployment/Resource",
    "cfn_nag": {
     "rules_to_suppress": [
      {
       "id": "W45",
       "reason": "ApiGateway has AccessLogging enabled in AWS::ApiGateway::Stage resource, but cfn_nag checks for it in AWS::ApiGateway::Deployment resource"
      }
     ]
    }
   }
  },
  "ApiGatewayToLambdaPatternLambdaRestApiDeploymentStageprodFDEB8074": {
   "Type": "AWS::ApiGateway::Stage",
   "Properties": {
    "AccessLogSetting": {
     "DestinationArn": {
      "Fn::GetAtt": [
       "ApiGatewayToLambdaPatternApiAccessLogGroup9383E9FC",
       "Arn"
      ]
     },
     "Format": "{\"requestId\":\"$context.requestId\",\"ip\":\"$context.identity.sourceIp\",\"user\":\"$context.identity.user\",\"caller\":\"$context.identity.caller\",\"requestTime\":\"$context.requestTime\",\"httpMethod\":\"$context.httpMethod\",\"resourcePath\":\"$context.resourcePath\",\"status\":\"$context.status\",\"protocol\":\"$context.protocol\",\"responseLength\":\"$context.responseLength\"}"
    },
    "DeploymentId": {
     "Ref": "ApiGatewayToLambdaPatternLambdaRestApiDeployment4109DB936142ac042f9560f21cea1d93aab946de"
    },
    "MethodSettings": [
     {
      "DataTraceEnabled": false,
      "HttpMethod": "*",
      "LoggingLevel": "INFO",
      "ResourcePath": "/*"
     }
    ],
    "RestApiId": {
     "Ref": "ApiGatewayToLambdaPatternLambdaRestApiC0598E46"
    },
    "StageName": "prod",
    "TracingEnabled": true
   },
   "Metadata": {
    "aws:cdk:path": "MflOddsPosterStack/ApiGatewayToLambdaPattern/LambdaRestApi/DeploymentStage.prod/Resource",
    "guard": {
     "SuppressedRules": [
      "API_GW_CACHE_ENABLED_AND_ENCRYPTED"
     ]
    }
   }
  },
  "ApiGatewayToLambdaPatternLambdaRestApiproxyF368A2D5": {
   "Type": "AWS::ApiGateway::Resource",
   "Properties": {
    "ParentId": {
     "Fn::GetAtt": [
      "ApiGatewayToLambdaPatternLambdaRestApiC0598E46",
      "RootResourceId"
     ]
    },
    "PathPart": "{proxy+}",
    "RestApiId": {
     "Ref": "ApiGatewayToLambdaPatternLambdaRestApiC0598E46"
    }
   },
   "Metadata": {
    "aws:cdk:path": "MflOddsPosterStack/ApiGatewayToLambdaPattern/LambdaRestApi/Default/{proxy+}/Resource"
   }
  },
  "ApiGatewayToLambdaPatternLambdaRestApiproxyANYApiPermissionMflOddsPosterStackApiGatewayToLambdaPatternLambdaRestApiA315CCB3ANYproxy4C99ED8C": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Fn::GetAtt": [
      "ApiGatewayToLambdaPatternLambdaFunction5DC51B7E",
      "Arn"
     ]
    },
    "Principal": "apigateway.amazonaws.com",
    "SourceArn": {
     "Fn::Join": [
      "",
      [
       "arn:",
       {
        "Ref": "AWS::Partition"
       },
       ":execute-api:",
       {
        "Ref": "AWS::Region"
       },
       ":",
       {
        "Ref": "AWS::AccountId"
       },
       ":",
       {
        "Ref": "ApiGatewayToLambdaPatternLambdaRestApiC0598E46"
       },
       "/",
       {
        "Ref": "ApiGatewayToLambdaPatternLambdaRestApiDeploymentStageprodFDEB8074"
       },
       "/*/*"
      ]
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "MflOddsPosterStack/ApiGatewayToLambdaPattern/LambdaRestApi/Default/{proxy+}/ANY/ApiPermission.MflOddsPosterStackApiGatewayToLambdaPatternLambdaRestApiA315CCB3.ANY..{proxy+}"
   }
  },
  "ApiGatewayToLambdaPatternLambdaRestApiproxyANYApiPermissionTestMflOddsPosterStackApiGatewayToLambdaPatternLambdaRestApiA315CCB3ANYproxy7D74F219": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Fn::GetAtt": [
      "ApiGatewayToLambdaPatternLambdaFunction5DC51B7E",
      "Arn"
     ]
    },
    "Principal": "apigateway.amazonaws.com",
    "SourceArn": {
     "Fn::Join": [
      "",
      [
       "arn:",
       {
        "Ref": "AWS::Partition"
       },
       ":execute-api:",
       {
        "Ref": "AWS::Region"
       },
       ":",
       {
        "Ref": "AWS::AccountId"
       },
       ":",
       {
        "Ref": "ApiGatewayToLambdaPatternLambdaRestApiC0598E46"
       },
       "/test-invoke-stage/*/*"
      ]
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "MflOddsPosterStack/ApiGatewayToLambdaPattern/LambdaRestApi/Default/{proxy+}/ANY/ApiPermission.Test.MflOddsPosterStackApiGatewayToLambdaPatternLambdaRestApiA315CCB3.ANY..{proxy+}"
   }
  },
  "ApiGatewayToLambdaPatternLambdaRestApiproxyANY321FD2C2": {
   "Type": "AWS::ApiGateway::Method",
   "Properties": {
    "AuthorizationType": "AWS_IAM",
    "HttpMethod": "ANY",
    "Integration": {
     "IntegrationHttpMethod": "POST",
     "Type": "AWS_PROXY",
     "Uri": {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":apigateway:",
        {
         "Ref": "AWS::Region"
        },
        ":lambda:path/2015-03-31/functions/",
        {
         "Fn::GetAtt": [
          "ApiGatewayToLambdaPatternLambdaFunction5DC51B7E",
          "Arn"
         ]
        },
        "/invocations"
       ]
      ]
     }
    },
    "ResourceId": {
     "Ref": "ApiGatewayToLambdaPatternLambdaRestApiproxyF368A2D5"
    },
    "RestApiId": {
     "Ref": "ApiGatewayToLambdaPatternLambdaRestApiC0598E46"
    }
   },
   "Metadata": {
    "aws:cdk:path": "MflOddsPosterStack/ApiGatewayToLambdaPattern/LambdaRestApi/Default/{proxy+}/ANY/Resource"
   }
  },
  "ApiGatewayToLambdaPatternLambdaRestApiANYApiPermissionMflOddsPosterStackApiGatewayToLambdaPatternLambdaRestApiA315CCB3ANYCA4B697E": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Fn::GetAtt": [
      "ApiGatewayToLambdaPatternLambdaFunction5DC51B7E",
      "Arn"
     ]
    },
    "Principal": "apigateway.amazonaws.com",
    "SourceArn": {
     "Fn::Join": [
      "",
      [
       "arn:",
       {
        "Ref": "AWS::Partition"
       },
       ":execute-api:",
       {
        "Ref": "AWS::Region"
       },
       ":",
       {
        "Ref": "AWS::AccountId"
       },
       ":",
       {
        "Ref": "ApiGatewayToLambdaPatternLambdaRestApiC0598E46"
       },
       "/",
       {
        "Ref": "ApiGatewayToLambdaPatternLambdaRestApiDeploymentStageprodFDEB8074"
       },
       "/*/"
      ]
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "MflOddsPosterStack/ApiGatewayToLambdaPattern/LambdaRestApi/Default/ANY/ApiPermission.MflOddsPosterStackApiGatewayToLambdaPatternLambdaRestApiA315CCB3.ANY.."
   }
  },
  "ApiGatewayToLambdaPatternLambdaRestApiANYApiPermissionTestMflOddsPosterStackApiGatewayToLambdaPatternLambdaRestApiA315CCB3ANY2CBBA66E": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Fn::GetAtt": [
      "ApiGatewayToLambdaPatternLambdaFunction5DC51B7E",
      "Arn"
     ]
    },
    "Principal": "apigateway.amazonaws.com",
    "SourceArn": {
     "Fn::Join": [
      "",
      [
       "arn:",
       {
        "Ref": "AWS::Partition"
       },
       ":execute-api:",
       {
        "Ref": "AWS::Region"
       },
       ":",
       {
        "Ref": "AWS::AccountId"
       },
       ":",
       {
        "Ref": "ApiGatewayToLambdaPatternLambdaRestApiC0598E46"
       },
       "/test-invoke-stage/*/"
      ]
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "MflOddsPosterStack/ApiGatewayToLambdaPattern/LambdaRestApi/Default/ANY/ApiPermission.Test.MflOddsPosterStackApiGatewayToLambdaPatternLambdaRestApiA315CCB3.ANY.."
   }
  },
  "ApiGatewayToLambdaPatternLambdaRestApiANY07ADEFED": {
   "Type": "AWS::ApiGateway::Method",
   "Properties": {
    "AuthorizationType": "AWS_IAM",
    "HttpMethod": "ANY",
    "Integration": {
     "IntegrationHttpMethod": "POST",
     "Type": "AWS_PROXY",
     "Uri": {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":apigateway:",
        {
         "Ref": "AWS::Region"
        },
        ":lambda:path/2015-03-31/functions/",
        {
         "Fn::GetAtt": [
          "ApiGatewayToLambdaPatternLambdaFunction5DC51B7E",
          "Arn"
         ]
        },
        "/invocations"
       ]
      ]
     }
    },
    "ResourceId": {
     "Fn::GetAtt": [
      "ApiGatewayToLambdaPatternLambdaRestApiC0598E46",
      "RootResourceId"
     ]
    },
    "RestApiId": {
     "Ref": "ApiGatewayToLambdaPatternLambdaRestApiC0598E46"
    }
   },
   "Metadata": {
    "aws:cdk:path": "MflOddsPosterStack/ApiGatewayToLambdaPattern/LambdaRestApi/Default/ANY/Resource"
   }
  },
  "ApiGatewayToLambdaPatternLambdaRestApiUsagePlan837CF24C": {
   "Type": "AWS::ApiGateway::UsagePlan",
   "Properties": {
    "ApiStages": [
     {
      "ApiId": {
       "Ref": "ApiGatewayToLambdaPatternLambdaRestApiC0598E46"
      },
      "Stage": {
       "Ref": "ApiGatewayToLambdaPatternLambdaRestApiDeploymentStageprodFDEB8074"
      },
      "Throttle": {}
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "MflOddsPosterStack/ApiGatewayToLambdaPattern/LambdaRestApi/UsagePlan/Resource"
   }
  },
  "ApiGatewayToLambdaPatternLambdaRestApiCloudWatchRole3977FB08": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "apigateway.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "Policies": [
     {
      "PolicyDocument": {
       "Statement": [
        {
         "Action": [
          "logs:CreateLogGroup",
          "logs:CreateLogStream",
          "logs:DescribeLogGroups",
          "logs:DescribeLogStreams",
          "logs:FilterLogEvents",
          "logs:GetLogEvents",
          "logs:PutLogEvents"
         ],
         "Effect": "Allow",
         "Resource": {
          "Fn::Join": [
           "",
           [
            "arn:",
            {
             "Ref": "AWS::Partition"
            },
            ":logs:",
            {
             "Ref": "AWS::Region"
            },
            ":",
            {
             "Ref": "AWS::AccountId"
            },
            ":*"
           ]
          ]
         }
        }
       ],
       "Version": "2012-10-17"
      },
      "PolicyName": "LambdaRestApiCloudWatchRolePolicy"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "MflOddsPosterStack/ApiGatewayToLambdaPattern/LambdaRestApiCloudWatchRole/Resource",
    "guard": {
     "SuppressedRules": [
      "IAM_NO_INLINE_POLICY_CHECK"
     ]
    }
   }
  },
  "ApiGatewayToLambdaPatternLambdaRestApiAccountA31D1168": {
   "Type": "AWS::ApiGateway::Account",
   "Properties": {
    "CloudWatchRoleArn": {
     "Fn::GetAtt": [
      "ApiGatewayToLambdaPatternLambdaRestApiCloudWatchRole3977FB08",
      "Arn"
     ]
    }
   },
   "DependsOn": [
    "ApiGatewayToLambdaPatternLambdaRestApiC0598E46"
   ],
   "Metadata": {
    "aws:cdk:path": "MflOddsPosterStack/ApiGatewayToLambdaPattern/LambdaRestApiAccount"
   }
  },
  "lambdagatheroddsgatherdependenciesE190E61F": {
   "Type": "AWS::Lambda::LayerVersion",
   "Properties": {
    "Content": {
     "S3Bucket": {
      "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
     },
     "S3Key": "87c0f9b76e3902fbff8bba2a4f2af5049350180d5c9d4bee2bc0eb6a0d2eb830.zip"
    }
   },
   "Metadata": {
    "aws:cdk:path": "MflOddsPosterStack/lambda--gather_odds-gather-dependencies/Resource",
    "aws:asset:path": "asset.87c0f9b76e3902fbff8bba2a4f2af5049350180d5c9d4bee2bc0eb6a0d2eb830",
    "aws:asset:is-bundled": false,
    "aws:asset:property": "Content"
   }
  },
  "CloudFrontApiGatewayToLambdaLambdaFunctionServiceRole879B3414": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "Policies": [
     {
      "PolicyDocument": {
       "Statement": [
        {
         "Action": [
          "logs:CreateLogGroup",
          "logs:CreateLogStream",
          "logs:PutLogEvents"
         ],
         "Effect": "Allow",
         "Resource": {
          "Fn::Join": [
           "",
           [
            "arn:",
            {
             "Ref": "AWS::Partition"
            },
            ":logs:",
            {
             "Ref": "AWS::Region"
            },
            ":",
            {
             "Ref": "AWS::AccountId"
            },
            ":log-group:/aws/lambda/*"
           ]
          ]
         }
        }
       ],
       "Version": "2012-10-17"
      },
      "PolicyName": "LambdaFunctionServiceRolePolicy"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "MflOddsPosterStack/CloudFrontApiGatewayToLambda/LambdaFunctionServiceRole/Resource",
    "guard": {
     "SuppressedRules": [
      "IAM_NO_INLINE_POLICY_CHECK"
     ]
    }
   }
  },
  "CloudFrontApiGatewayToLambdaLambdaFunction3FB4AD9F": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "S3Bucket": {
      "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
     },
     "S3Key": "23c6e9716dfd21b70f7f5673b4dab7e8d15a22c5db589bbca87d6b779286f1e1.zip"
    },
    "Environment": {
     "Variables": {
      "SECRET_ARN": {
       "Fn::GetAtt": [
        "mflOddsApiKey",
        "Id"
       ]
      },
      "POSTER_LAMBDA_ARN": {
       "Fn::GetAtt": [
        "ApiGatewayToLambdaPatternLambdaFunction5DC51B7E",
        "Arn"
       ]
      }
     }
    },
    "Handler": "gather.lambda_handler",
    "Layers": [
     {
      "Ref": "lambdagatheroddsgatherdependenciesE190E61F"
     }
    ],
    "Role": {
     "Fn::GetAtt": [
      "MyLambdaRole6064C0FA",
      "Arn"
     ]
    },
    "Runtime": "python3.11",
    "Timeout": 8,
    "TracingConfig": {
     "Mode": "Active"
    }
   },
   "DependsOn": [
    "MyLambdaRoleDefaultPolicyF04EC3D5",
    "MyLambdaRole6064C0FA"
   ],
   "Metadata": {
    "aws:cdk:path": "MflOddsPosterStack/CloudFrontApiGatewayToLambda/LambdaFunction/Resource",
    "aws:asset:path": "asset.23c6e9716dfd21b70f7f5673b4dab7e8d15a22c5db589bbca87d6b779286f1e1",
    "aws:asset:is-bundled": false,
    "aws:asset:property": "Code",
    "cfn_nag": {
     "rules_to_suppress": [
      {
       "id": "W58",
       "reason": "Lambda functions has the required permission to write CloudWatch Logs. It uses custom policy instead of arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole with tighter permissions."
      },
      {
       "id": "W89",
       "reason": "This is not a rule for the general case, just for specific use cases/industries"
      },
      {
       "id": "W92",
       "reason": "Impossible for us to define the correct concurrency for clients"
      }
     ]
    }
   }
  },
  "CloudFrontApiGatewayToLambdaApiAccessLogGroup2FD9EE65": {
   "Type": "AWS::Logs::LogGroup",
   "UpdateReplacePolicy": "Retain",
   "DeletionPolicy": "Retain",
   "Metadata": {
    "aws:cdk:path": "MflOddsPosterStack/CloudFrontApiGatewayToLambda/ApiAccessLogGroup/Resource",
    "cfn_nag": {
     "rules_to_suppress": [
      {
       "id": "W86",
       "reason": "Retention period for CloudWatchLogs LogGroups are set to 'Never Expire' to preserve customer data indefinitely"
      },
      {
       "id": "W84",
       "reason": "By default CloudWatchLogs LogGroups data is encrypted using the CloudWatch server-side encryption keys (AWS Managed Keys)"
      }
     ]
    }
   }
  },
  "CloudFrontApiGatewayToLambdaLambdaRestApi9B0A8F07": {
   "Type": "AWS::ApiGateway::RestApi",
   "Properties": {
    "EndpointConfiguration": {
     "Types": [
      "REGIONAL"
     ]
    },
    "Name": "LambdaRestApi"
   },
   "Metadata": {
    "aws:cdk:path": "MflOddsPosterStack/CloudFrontApiGatewayToLambda/LambdaRestApi/Resource"
   }
  },
  "CloudFrontApiGatewayToLambdaLambdaRestApiDeployment9D8601B9b553f0181767ba259ca0f5b40f863145": {
   "Type": "AWS::ApiGateway::Deployment",
   "Properties": {
    "Description": "Automatically created by the RestApi construct",
    "RestApiId": {
     "Ref": "CloudFrontApiGatewayToLambdaLambdaRestApi9B0A8F07"
    }
   },
   "DependsOn": [
    "CloudFrontApiGatewayToLambdaLambdaRestApiproxyANY87F44F7D",
    "CloudFrontApiGatewayToLambdaLambdaRestApiproxyDAA40A82",
    "CloudFrontApiGatewayToLambdaLambdaRestApiANY3A5A0BEF"
   ],
   "Metadata": {
    "aws:cdk:path": "MflOddsPosterStack/CloudFrontApiGatewayToLambda/LambdaRestApi/Deployment/Resource",
    "cfn_nag": {
     "rules_to_suppress": [
      {
       "id": "W45",
       "reason": "ApiGateway has AccessLogging enabled in AWS::ApiGateway::Stage resource, but cfn_nag checks for it in AWS::ApiGateway::Deployment resource"
      }
     ]
    }
   }
  },
  "CloudFrontApiGatewayToLambdaLambdaRestApiDeploymentStageprodCA95BC8F": {
   "Type": "AWS::ApiGateway::Stage",
   "Properties": {
    "AccessLogSetting": {
     "DestinationArn": {
      "Fn::GetAtt": [
       "CloudFrontApiGatewayToLambdaApiAccessLogGroup2FD9EE65",
       "Arn"
      ]
     },
     "Format": "{\"requestId\":\"$context.requestId\",\"ip\":\"$context.identity.sourceIp\",\"user\":\"$context.identity.user\",\"caller\":\"$context.identity.caller\",\"requestTime\":\"$context.requestTime\",\"httpMethod\":\"$context.httpMethod\",\"resourcePath\":\"$context.resourcePath\",\"status\":\"$context.status\",\"protocol\":\"$context.protocol\",\"responseLength\":\"$context.responseLength\"}"
    },
    "DeploymentId": {
     "Ref": "CloudFrontApiGatewayToLambdaLambdaRestApiDeployment9D8601B9b553f0181767ba259ca0f5b40f863145"
    },
    "MethodSettings": [
     {
      "DataTraceEnabled": false,
      "HttpMethod": "*",
      "LoggingLevel": "INFO",
      "ResourcePath": "/*"
     }
    ],
    "RestApiId": {
     "Ref": "CloudFrontApiGatewayToLambdaLambdaRestApi9B0A8F07"
    },
    "StageName": "prod",
    "TracingEnabled": true
   },
   "Metadata": {
    "aws:cdk:path": "MflOddsPosterStack/CloudFrontApiGatewayToLambda/LambdaRestApi/DeploymentStage.prod/Resource",
    "guard": {
     "SuppressedRules": [
      "API_GW_CACHE_ENABLED_AND_ENCRYPTED"
     ]
    }
   }
  },
  "CloudFrontApiGatewayToLambdaLambdaRestApiproxyDAA40A82": {
   "Type": "AWS::ApiGateway::Resource",
   "Properties": {
    "ParentId": {
     "Fn::GetAtt": [
      "CloudFrontApiGatewayToLambdaLambdaRestApi9B0A8F07",
      "RootResourceId"
     ]
    },
    "PathPart": "{proxy+}",
    "RestApiId": {
     "Ref": "CloudFrontApiGatewayToLambdaLambdaRestApi9B0A8F07"
    }
   },
   "Metadata": {
    "aws:cdk:path": "MflOddsPosterStack/CloudFrontApiGatewayToLambda/LambdaRestApi/Default/{proxy+}/Resource"
   }
  },
  "CloudFrontApiGatewayToLambdaLambdaRestApiproxyANYApiPermissionMflOddsPosterStackCloudFrontApiGatewayToLambdaLambdaRestApiFB81739EANYproxy5C360D11": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Fn::GetAtt": [
      "CloudFrontApiGatewayToLambdaLambdaFunction3FB4AD9F",
      "Arn"
     ]
    },
    "Principal": "apigateway.amazonaws.com",
    "SourceArn": {
     "Fn::Join": [
      "",
      [
       "arn:",
       {
        "Ref": "AWS::Partition"
       },
       ":execute-api:",
       {
        "Ref": "AWS::Region"
       },
       ":",
       {
        "Ref": "AWS::AccountId"
       },
       ":",
       {
        "Ref": "CloudFrontApiGatewayToLambdaLambdaRestApi9B0A8F07"
       },
       "/",
       {
        "Ref": "CloudFrontApiGatewayToLambdaLambdaRestApiDeploymentStageprodCA95BC8F"
       },
       "/*/*"
      ]
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "MflOddsPosterStack/CloudFrontApiGatewayToLambda/LambdaRestApi/Default/{proxy+}/ANY/ApiPermission.MflOddsPosterStackCloudFrontApiGatewayToLambdaLambdaRestApiFB81739E.ANY..{proxy+}"
   }
  },
  "CloudFrontApiGatewayToLambdaLambdaRestApiproxyANYApiPermissionTestMflOddsPosterStackCloudFrontApiGatewayToLambdaLambdaRestApiFB81739EANYproxy7E24A18B": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Fn::GetAtt": [
      "CloudFrontApiGatewayToLambdaLambdaFunction3FB4AD9F",
      "Arn"
     ]
    },
    "Principal": "apigateway.amazonaws.com",
    "SourceArn": {
     "Fn::Join": [
      "",
      [
       "arn:",
       {
        "Ref": "AWS::Partition"
       },
       ":execute-api:",
       {
        "Ref": "AWS::Region"
       },
       ":",
       {
        "Ref": "AWS::AccountId"
       },
       ":",
       {
        "Ref": "CloudFrontApiGatewayToLambdaLambdaRestApi9B0A8F07"
       },
       "/test-invoke-stage/*/*"
      ]
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "MflOddsPosterStack/CloudFrontApiGatewayToLambda/LambdaRestApi/Default/{proxy+}/ANY/ApiPermission.Test.MflOddsPosterStackCloudFrontApiGatewayToLambdaLambdaRestApiFB81739E.ANY..{proxy+}"
   }
  },
  "CloudFrontApiGatewayToLambdaLambdaRestApiproxyANY87F44F7D": {
   "Type": "AWS::ApiGateway::Method",
   "Properties": {
    "AuthorizationType": "NONE",
    "HttpMethod": "ANY",
    "Integration": {
     "IntegrationHttpMethod": "POST",
     "Type": "AWS_PROXY",
     "Uri": {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":apigateway:",
        {
         "Ref": "AWS::Region"
        },
        ":lambda:path/2015-03-31/functions/",
        {
         "Fn::GetAtt": [
          "CloudFrontApiGatewayToLambdaLambdaFunction3FB4AD9F",
          "Arn"
         ]
        },
        "/invocations"
       ]
      ]
     }
    },
    "ResourceId": {
     "Ref": "CloudFrontApiGatewayToLambdaLambdaRestApiproxyDAA40A82"
    },
    "RestApiId": {
     "Ref": "CloudFrontApiGatewayToLambdaLambdaRestApi9B0A8F07"
    }
   },
   "Metadata": {
    "aws:cdk:path": "MflOddsPosterStack/CloudFrontApiGatewayToLambda/LambdaRestApi/Default/{proxy+}/ANY/Resource"
   }
  },
  "CloudFrontApiGatewayToLambdaLambdaRestApiANYApiPermissionMflOddsPosterStackCloudFrontApiGatewayToLambdaLambdaRestApiFB81739EANY0AF847BF": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Fn::GetAtt": [
      "CloudFrontApiGatewayToLambdaLambdaFunction3FB4AD9F",
      "Arn"
     ]
    },
    "Principal": "apigateway.amazonaws.com",
    "SourceArn": {
     "Fn::Join": [
      "",
      [
       "arn:",
       {
        "Ref": "AWS::Partition"
       },
       ":execute-api:",
       {
        "Ref": "AWS::Region"
       },
       ":",
       {
        "Ref": "AWS::AccountId"
       },
       ":",
       {
        "Ref": "CloudFrontApiGatewayToLambdaLambdaRestApi9B0A8F07"
       },
       "/",
       {
        "Ref": "CloudFrontApiGatewayToLambdaLambdaRestApiDeploymentStageprodCA95BC8F"
       },
       "/*/"
      ]
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "MflOddsPosterStack/CloudFrontApiGatewayToLambda/LambdaRestApi/Default/ANY/ApiPermission.MflOddsPosterStackCloudFrontApiGatewayToLambdaLambdaRestApiFB81739E.ANY.."
   }
  },
  "CloudFrontApiGatewayToLambdaLambdaRestApiANYApiPermissionTestMflOddsPosterStackCloudFrontApiGatewayToLambdaLambdaRestApiFB81739EANY83C3BF9D": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Fn::GetAtt": [
      "CloudFrontApiGatewayToLambdaLambdaFunction3FB4AD9F",
      "Arn"
     ]
    },
    "Principal": "apigateway.amazonaws.com",
    "SourceArn": {
     "Fn::Join": [
      "",
      [
       "arn:",
       {
        "Ref": "AWS::Partition"
       },
       ":execute-api:",
       {
        "Ref": "AWS::Region"
       },
       ":",
       {
        "Ref": "AWS::AccountId"
       },
       ":",
       {
        "Ref": "CloudFrontApiGatewayToLambdaLambdaRestApi9B0A8F07"
       },
       "/test-invoke-stage/*/"
      ]
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "MflOddsPosterStack/CloudFrontApiGatewayToLambda/LambdaRestApi/Default/ANY/ApiPermission.Test.MflOddsPosterStackCloudFrontApiGatewayToLambdaLambdaRestApiFB81739E.ANY.."
   }
  },
  "CloudFrontApiGatewayToLambdaLambdaRestApiANY3A5A0BEF": {
   "Type": "AWS::ApiGateway::Method",
   "Properties": {
    "AuthorizationType": "NONE",
    "HttpMethod": "ANY",
    "Integration": {
     "IntegrationHttpMethod": "POST",
     "Type": "AWS_PROXY",
     "Uri": {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":apigateway:",
        {
         "Ref": "AWS::Region"
        },
        ":lambda:path/2015-03-31/functions/",
        {
         "Fn::GetAtt": [
          "CloudFrontApiGatewayToLambdaLambdaFunction3FB4AD9F",
          "Arn"
         ]
        },
        "/invocations"
       ]
      ]
     }
    },
    "ResourceId": {
     "Fn::GetAtt": [
      "CloudFrontApiGatewayToLambdaLambdaRestApi9B0A8F07",
      "RootResourceId"
     ]
    },
    "RestApiId": {
     "Ref": "CloudFrontApiGatewayToLambdaLambdaRestApi9B0A8F07"
    }
   },
   "Metadata": {
    "aws:cdk:path": "MflOddsPosterStack/CloudFrontApiGatewayToLambda/LambdaRestApi/Default/ANY/Resource"
   }
  },
  "CloudFrontApiGatewayToLambdaLambdaRestApiUsagePlan2D6B039C": {
   "Type": "AWS::ApiGateway::UsagePlan",
   "Properties": {
    "ApiStages": [
     {
      "ApiId": {
       "Ref": "CloudFrontApiGatewayToLambdaLambdaRestApi9B0A8F07"
      },
      "Stage": {
       "Ref": "CloudFrontApiGatewayToLambdaLambdaRestApiDeploymentStageprodCA95BC8F"
      },
      "Throttle": {}
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "MflOddsPosterStack/CloudFrontApiGatewayToLambda/LambdaRestApi/UsagePlan/Resource"
   }
  },
  "CloudFrontApiGatewayToLambdaLambdaRestApiCloudWatchRole51BBC337": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "apigateway.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "Policies": [
     {
      "PolicyDocument": {
       "Statement": [
        {
         "Action": [
          "logs:CreateLogGroup",
          "logs:CreateLogStream",
          "logs:DescribeLogGroups",
          "logs:DescribeLogStreams",
          "logs:FilterLogEvents",
          "logs:GetLogEvents",
          "logs:PutLogEvents"
         ],
         "Effect": "Allow",
         "Resource": {
          "Fn::Join": [
           "",
           [
            "arn:",
            {
             "Ref": "AWS::Partition"
            },
            ":logs:",
            {
             "Ref": "AWS::Region"
            },
            ":",
            {
             "Ref": "AWS::AccountId"
            },
            ":*"
           ]
          ]
         }
        }
       ],
       "Version": "2012-10-17"
      },
      "PolicyName": "LambdaRestApiCloudWatchRolePolicy"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "MflOddsPosterStack/CloudFrontApiGatewayToLambda/LambdaRestApiCloudWatchRole/Resource",
    "guard": {
     "SuppressedRules": [
      "IAM_NO_INLINE_POLICY_CHECK"
     ]
    }
   }
  },
  "CloudFrontApiGatewayToLambdaLambdaRestApiAccount41E38B7F": {
   "Type": "AWS::ApiGateway::Account",
   "Properties": {
    "CloudWatchRoleArn": {
     "Fn::GetAtt": [
      "CloudFrontApiGatewayToLambdaLambdaRestApiCloudWatchRole51BBC337",
      "Arn"
     ]
    }
   },
   "DependsOn": [
    "CloudFrontApiGatewayToLambdaLambdaRestApi9B0A8F07"
   ],
   "Metadata": {
    "aws:cdk:path": "MflOddsPosterStack/CloudFrontApiGatewayToLambda/LambdaRestApiAccount"
   }
  },
  "CloudFrontApiGatewayToLambdaCloudFrontToApiGatewaySetHttpSecurityHeaders9E009886": {
   "Type": "AWS::CloudFront::Function",
   "Properties": {
    "AutoPublish": true,
    "FunctionCode": "function handler(event) { var response = event.response; var headers = response.headers; headers['strict-transport-security'] = { value: 'max-age=63072000; includeSubdomains; preload'}; headers['content-security-policy'] = { value: \"default-src 'none'; img-src 'self'; script-src 'self'; style-src 'self'; object-src 'none'\"}; headers['x-content-type-options'] = { value: 'nosniff'}; headers['x-frame-options'] = {value: 'DENY'}; headers['x-xss-protection'] = {value: '1; mode=block'}; return response; }",
    "FunctionConfig": {
     "Comment": "SetHttpSecurityHeadersc8c2817951f6fb8c792685716ac5140d932eba2f34",
     "Runtime": "cloudfront-js-1.0"
    },
    "Name": "SetHttpSecurityHeadersc8c2817951f6fb8c792685716ac5140d932eba2f34"
   },
   "Metadata": {
    "aws:cdk:path": "MflOddsPosterStack/CloudFrontApiGatewayToLambda/CloudFrontToApiGateway/SetHttpSecurityHeaders/Resource"
   }
  },
  "CloudFrontApiGatewayToLambdaCloudFrontToApiGatewayCloudfrontLoggingBucketAccessLogDF4AC128": {
   "Type": "AWS::S3::Bucket",
   "Properties": {
    "BucketEncryption": {
     "ServerSideEncryptionConfiguration": [
      {
       "ServerSideEncryptionByDefault": {
        "SSEAlgorithm": "AES256"
       }
      }
     ]
    },
    "PublicAccessBlockConfiguration": {
     "BlockPublicAcls": true,
     "BlockPublicPolicy": true,
     "IgnorePublicAcls": true,
     "RestrictPublicBuckets": true
    },
    "VersioningConfiguration": {
     "Status": "Enabled"
    }
   },
   "UpdateReplacePolicy": "Retain",
   "DeletionPolicy": "Retain",
   "Metadata": {
    "aws:cdk:path": "MflOddsPosterStack/CloudFrontApiGatewayToLambda/CloudFrontToApiGateway/CloudfrontLoggingBucketAccessLog/Resource",
    "cfn_nag": {
     "rules_to_suppress": [
      {
       "id": "W35",
       "reason": "This S3 bucket is used as the access logging bucket for another bucket"
      }
     ]
    }
   }
  },
  "CloudFrontApiGatewayToLambdaCloudFrontToApiGatewayCloudfrontLoggingBucketAccessLogPolicy3F98D34B": {
   "Type": "AWS::S3::BucketPolicy",
   "Properties": {
    "Bucket": {
     "Ref": "CloudFrontApiGatewayToLambdaCloudFrontToApiGatewayCloudfrontLoggingBucketAccessLogDF4AC128"
    },
    "PolicyDocument": {
     "Statement": [
      {
       "Action": "s3:*",
       "Condition": {
        "Bool": {
         "aws:SecureTransport": "false"
        }
       },
       "Effect": "Deny",
       "Principal": {
        "AWS": "*"
       },
       "Resource": [
        {
         "Fn::GetAtt": [
          "CloudFrontApiGatewayToLambdaCloudFrontToApiGatewayCloudfrontLoggingBucketAccessLogDF4AC128",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "CloudFrontApiGatewayToLambdaCloudFrontToApiGatewayCloudfrontLoggingBucketAccessLogDF4AC128",
             "Arn"
            ]
           },
           "/*"
          ]
         ]
        }
       ]
      },
      {
       "Action": "s3:PutObject",
       "Condition": {
        "ArnLike": {
         "aws:SourceArn": {
          "Fn::GetAtt": [
           "CloudFrontApiGatewayToLambdaCloudFrontToApiGatewayCloudfrontLoggingBucketF7A2D3D7",
           "Arn"
          ]
         }
        },
        "StringEquals": {
         "aws:SourceAccount": {
          "Ref": "AWS::AccountId"
         }
        }
       },
       "Effect": "Allow",
       "Principal": {
        "Service": "logging.s3.amazonaws.com"
       },
       "Resource": {
        "Fn::Join": [
         "",
         [
          {
           "Fn::GetAtt": [
            "CloudFrontApiGatewayToLambdaCloudFrontToApiGatewayCloudfrontLoggingBucketAccessLogDF4AC128",
            "Arn"
           ]
          },
          "/*"
         ]
        ]
       }
      }
     ],
     "Version": "2012-10-17"
    }
   },
   "Metadata": {
    "aws:cdk:path": "MflOddsPosterStack/CloudFrontApiGatewayToLambda/CloudFrontToApiGateway/CloudfrontLoggingBucketAccessLog/Policy/Resource"
   }
  },
  "CloudFrontApiGatewayToLambdaCloudFrontToApiGatewayCloudfrontLoggingBucketF7A2D3D7": {
   "Type": "AWS::S3::Bucket",
   "Properties": {
    "AccessControl": "LogDeliveryWrite",
    "BucketEncryption": {
     "ServerSideEncryptionConfiguration": [
      {
       "ServerSideEncryptionByDefault": {
        "SSEAlgorithm": "AES256"
       }
      }
     ]
    },
    "LoggingConfiguration": {
     "DestinationBucketName": {
      "Ref": "CloudFrontApiGatewayToLambdaCloudFrontToApiGatewayCloudfrontLoggingBucketAccessLogDF4AC128"
     }
    },
    "OwnershipControls": {
     "Rules": [
      {
       "ObjectOwnership": "ObjectWriter"
      }
     ]
    },
    "PublicAccessBlockConfiguration": {
     "BlockPublicAcls": true,
     "BlockPublicPolicy": true,
     "IgnorePublicAcls": true,
     "RestrictPublicBuckets": true
    },
    "VersioningConfiguration": {
     "Status": "Enabled"
    }
   },
   "UpdateReplacePolicy": "Retain",
   "DeletionPolicy": "Retain",
   "Metadata": {
    "aws:cdk:path": "MflOddsPosterStack/CloudFrontApiGatewayToLambda/CloudFrontToApiGateway/CloudfrontLoggingBucket/Resource"
   }
  },
  "CloudFrontApiGatewayToLambdaCloudFrontToApiGatewayCloudfrontLoggingBucketPolicyF747600E": {
   "Type": "AWS::S3::BucketPolicy",
   "Properties": {
    "Bucket": {
     "Ref": "CloudFrontApiGatewayToLambdaCloudFrontToApiGatewayCloudfrontLoggingBucketF7A2D3D7"
    },
    "PolicyDocument": {
     "Statement": [
      {
       "Action": "s3:*",
       "Condition": {
        "Bool": {
         "aws:SecureTransport": "false"
        }
       },
       "Effect": "Deny",
       "Principal": {
        "AWS": "*"
       },
       "Resource": [
        {
         "Fn::GetAtt": [
          "CloudFrontApiGatewayToLambdaCloudFrontToApiGatewayCloudfrontLoggingBucketF7A2D3D7",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "CloudFrontApiGatewayToLambdaCloudFrontToApiGatewayCloudfrontLoggingBucketF7A2D3D7",
             "Arn"
            ]
           },
           "/*"
          ]
         ]
        }
       ]
      }
     ],
     "Version": "2012-10-17"
    }
   },
   "Metadata": {
    "aws:cdk:path": "MflOddsPosterStack/CloudFrontApiGatewayToLambda/CloudFrontToApiGateway/CloudfrontLoggingBucket/Policy/Resource"
   }
  },
  "CloudFrontApiGatewayToLambdaCloudFrontToApiGatewayCloudFrontDistributionE7497846": {
   "Type": "AWS::CloudFront::Distribution",
   "Properties": {
    "DistributionConfig": {
     "DefaultCacheBehavior": {
      "CachePolicyId": "658327ea-f89d-4fab-a63d-7e88639e58f6",
      "Compress": true,
      "FunctionAssociations": [
       {
        "EventType": "viewer-response",
        "FunctionARN": {
         "Fn::GetAtt": [
          "CloudFrontApiGatewayToLambdaCloudFrontToApiGatewaySetHttpSecurityHeaders9E009886",
          "FunctionARN"
         ]
        }
       }
      ],
      "TargetOriginId": "MflOddsPosterStackCloudFrontApiGatewayToLambdaCloudFrontToApiGatewayCloudFrontDistributionOrigin19CB6DB54",
      "ViewerProtocolPolicy": "redirect-to-https"
     },
     "Enabled": true,
     "HttpVersion": "http2",
     "IPV6Enabled": true,
     "Logging": {
      "Bucket": {
       "Fn::GetAtt": [
        "CloudFrontApiGatewayToLambdaCloudFrontToApiGatewayCloudfrontLoggingBucketF7A2D3D7",
        "RegionalDomainName"
       ]
      }
     },
     "Origins": [
      {
       "CustomOriginConfig": {
        "OriginProtocolPolicy": "https-only",
        "OriginSSLProtocols": [
         "TLSv1.2"
        ]
       },
       "DomainName": {
        "Fn::Select": [
         0,
         {
          "Fn::Split": [
           "/",
           {
            "Fn::Select": [
             1,
             {
              "Fn::Split": [
               "://",
               {
                "Fn::Join": [
                 "",
                 [
                  "https://",
                  {
                   "Ref": "CloudFrontApiGatewayToLambdaLambdaRestApi9B0A8F07"
                  },
                  ".execute-api.",
                  {
                   "Ref": "AWS::Region"
                  },
                  ".",
                  {
                   "Ref": "AWS::URLSuffix"
                  },
                  "/",
                  {
                   "Ref": "CloudFrontApiGatewayToLambdaLambdaRestApiDeploymentStageprodCA95BC8F"
                  },
                  "/"
                 ]
                ]
               }
              ]
             }
            ]
           }
          ]
         }
        ]
       },
       "Id": "MflOddsPosterStackCloudFrontApiGatewayToLambdaCloudFrontToApiGatewayCloudFrontDistributionOrigin19CB6DB54",
       "OriginPath": {
        "Fn::Join": [
         "",
         [
          "/",
          {
           "Ref": "CloudFrontApiGatewayToLambdaLambdaRestApiDeploymentStageprodCA95BC8F"
          }
         ]
        ]
       }
      }
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "MflOddsPosterStack/CloudFrontApiGatewayToLambda/CloudFrontToApiGateway/CloudFrontDistribution/Resource",
    "cfn_nag": {
     "rules_to_suppress": [
      {
       "id": "W70",
       "reason": "Since the distribution uses the CloudFront domain name, CloudFront automatically sets the security policy to TLSv1 regardless of the value of MinimumProtocolVersion"
      }
     ]
    }
   }
  },
  "MyRuleA44AB831": {
   "Type": "AWS::Events::Rule",
   "Properties": {
    "ScheduleExpression": "cron(0 1 ? * 5 *)",
    "State": "ENABLED",
    "Targets": [
     {
      "Arn": {
       "Fn::GetAtt": [
        "CloudFrontApiGatewayToLambdaLambdaFunction3FB4AD9F",
        "Arn"
       ]
      },
      "Id": "Target0"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "MflOddsPosterStack/MyRule/Resource"
   }
  },
  "MyRuleAllowEventRuleMflOddsPosterStackCloudFrontApiGatewayToLambdaLambdaFunction06C5B29424F01C85": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Fn::GetAtt": [
      "CloudFrontApiGatewayToLambdaLambdaFunction3FB4AD9F",
      "Arn"
     ]
    },
    "Principal": "events.amazonaws.com",
    "SourceArn": {
     "Fn::GetAtt": [
      "MyRuleA44AB831",
      "Arn"
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "MflOddsPosterStack/MyRule/AllowEventRuleMflOddsPosterStackCloudFrontApiGatewayToLambdaLambdaFunction06C5B294"
   }
  },
  "CDKMetadata": {
   "Type": "AWS::CDK::Metadata",
   "Properties": {
    "Analytics": "v2:deflate64:H4sIAAAAAAAA/21STU/DMAz9LdyzwEAIcWMMwQEQ1fi4oiw1JayNqzgBqqj/HSftWCftUr9nx83zi09lnJ9fypMj9UMzXW5mtVnL+OyV3ghOvUejGhlXWINYftgcC6yN7hIdUC82DUmm99AJAu3AU6OsqsDJyOnnnMrtQBichm1frZp1qWR8UB24N3Bk0KZze/w2WO3HwhQX4BpD6Ugv6OxdEfG9cpECcxmvg96Av1YEYoCpaURD2A0y5SwLK2JRWN05DG0WNOJeqNZUysOP6pLsJJ+H8ovWjPNleANtjV0DNt85YexrlY0cwNaPLLJw+NttM1O3xCP4TyxTakSvxN1FrbIPe2ShNQbre6FrDOWHQ+tlPOjgjSHvzDpsC1PeC/hmuWzCKowPz7Hv/wWLbHMawtgq1Z+Cb8PeGye8RFua4YcXJ7xjV2nJCOt8Ca8bf7wL2tNxKsSdt7NxM9jMuyHzgoPbk8EONSxT9TZVX/BA8+T1Dp/seciiY5Pt8Zmcz+Xp0RcZM3PsqWlArob4B3kttLk1AwAA"
   },
   "Metadata": {
    "aws:cdk:path": "MflOddsPosterStack/CDKMetadata/Default"
   },
   "Condition": "CDKMetadataAvailable"
  }
 },
 "Outputs": {
  "ApiGatewayToLambdaPatternLambdaRestApiEndpoint9A7AA3AD": {
   "Value": {
    "Fn::Join": [
     "",
     [
      "https://",
      {
       "Ref": "ApiGatewayToLambdaPatternLambdaRestApiC0598E46"
      },
      ".execute-api.",
      {
       "Ref": "AWS::Region"
      },
      ".",
      {
       "Ref": "AWS::URLSuffix"
      },
      "/",
      {
       "Ref": "ApiGatewayToLambdaPatternLambdaRestApiDeploymentStageprodFDEB8074"
      },
      "/"
     ]
    ]
   }
  },
  "CloudFrontApiGatewayToLambdaLambdaRestApiEndpoint86FC6FC0": {
   "Value": {
    "Fn::Join": [
     "",
     [
      "https://",
      {
       "Ref": "CloudFrontApiGatewayToLambdaLambdaRestApi9B0A8F07"
      },
      ".execute-api.",
      {
       "Ref": "AWS::Region"
      },
      ".",
      {
       "Ref": "AWS::URLSuffix"
      },
      "/",
      {
       "Ref": "CloudFrontApiGatewayToLambdaLambdaRestApiDeploymentStageprodCA95BC8F"
      },
      "/"
     ]
    ]
   }
  },
  "CloudFrontDistributionDomainName": {
   "Value": {
    "Fn::GetAtt": [
     "CloudFrontApiGatewayToLambdaCloudFrontToApiGatewayCloudFrontDistributionE7497846",
     "DomainName"
    ]
   }
  }
 },
 "Conditions": {
  "CDKMetadataAvailable": {
   "Fn::Or": [
    {
     "Fn::Or": [
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "af-south-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-east-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-northeast-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-northeast-2"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-northeast-3"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-south-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-south-2"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-southeast-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-southeast-2"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-southeast-3"
       ]
      }
     ]
    },
    {
     "Fn::Or": [
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-southeast-4"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ca-central-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ca-west-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "cn-north-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "cn-northwest-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-central-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-central-2"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-north-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-south-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-south-2"
       ]
      }
     ]
    },
    {
     "Fn::Or": [
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-west-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-west-2"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-west-3"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "il-central-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "me-central-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "me-south-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "sa-east-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "us-east-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "us-east-2"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "us-west-1"
       ]
      }
     ]
    },
    {
     "Fn::Equals": [
      {
       "Ref": "AWS::Region"
      },
      "us-west-2"
     ]
    }
   ]
  }
 },
 "Parameters": {
  "BootstrapVersion": {
   "Type": "AWS::SSM::Parameter::Value<String>",
   "Default": "/cdk-bootstrap/hnb659fds/version",
   "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]"
  }
 },
 "Rules": {
  "CheckBootstrapVersion": {
   "Assertions": [
    {
     "Assert": {
      "Fn::Not": [
       {
        "Fn::Contains": [
         [
          "1",
          "2",
          "3",
          "4",
          "5"
         ],
         {
          "Ref": "BootstrapVersion"
         }
        ]
       }
      ]
     },
     "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI."
    }
   ]
  }
 }
}